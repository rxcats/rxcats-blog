"use strict";(self.webpackChunkrxcats_blog=self.webpackChunkrxcats_blog||[]).push([[6808],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>d});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=p(t),y=a,d=g["".concat(l,".").concat(y)]||g[y]||u[y]||s;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=y;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[g]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3900:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const s={slug:"spring-message-converter",title:"Spring Message Converter \ud65c\uc6a9 \ud328\ud0b7 \uc554\ud638\ud654",authors:["rxcats"],tags:["Spring","MessageConverter","AES"],date:new Date("2024-03-14T03:00:00.000Z")},o=void 0,i={permalink:"/rxcats-blog/blog/spring-message-converter",source:"@site/blog/2024-02-28-spring-message-converter.mdx",title:"Spring Message Converter \ud65c\uc6a9 \ud328\ud0b7 \uc554\ud638\ud654",description:"Spring MessageConverter \ub97c \uc774\uc6a9\ud55c \ud328\ud0b7 \uc554/\ubcf5\ud638\ud654",date:"2024-03-14T03:00:00.000Z",formattedDate:"March 14, 2024",tags:[{label:"Spring",permalink:"/rxcats-blog/blog/tags/spring"},{label:"MessageConverter",permalink:"/rxcats-blog/blog/tags/message-converter"},{label:"AES",permalink:"/rxcats-blog/blog/tags/aes"}],hasTruncateMarker:!1,authors:[{name:"rxcats",title:"Game Backend Developer",url:"https://github.com/rxcats",imageURL:"https://avatars.githubusercontent.com/u/6582519?v=4",key:"rxcats"}],frontMatter:{slug:"spring-message-converter",title:"Spring Message Converter \ud65c\uc6a9 \ud328\ud0b7 \uc554\ud638\ud654",authors:["rxcats"],tags:["Spring","MessageConverter","AES"],date:"2024-03-14T03:00:00.000Z"},prevItem:{title:"Shop Titans - Official Data Spreadsheet",permalink:"/rxcats-blog/blog/shoptitans-spreadsheet"},nextItem:{title:"SSH config \ub85c git \uacc4\uc815 \uc5f0\ub3d9\ud558\uae30",permalink:"/rxcats-blog/blog/ssh-config"}},l={authorsImageUrls:[void 0]},p=[{value:"Spring MessageConverter \ub97c \uc774\uc6a9\ud55c \ud328\ud0b7 \uc554/\ubcf5\ud638\ud654",id:"spring-messageconverter-\ub97c-\uc774\uc6a9\ud55c-\ud328\ud0b7-\uc554\ubcf5\ud638\ud654",level:2},{value:"Unity \uac8c\uc784 \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \ud1b5\uc2e0\uc2dc Http body \ub97c \uc554/\ubcf5\ud638\ud654 \ud558\uae30 \uc704\ud55c \uc804\ub7b5",id:"unity-\uac8c\uc784-\ud074\ub77c\uc774\uc5b8\ud2b8\uc640-\ud1b5\uc2e0\uc2dc-http-body-\ub97c-\uc554\ubcf5\ud638\ud654-\ud558\uae30-\uc704\ud55c-\uc804\ub7b5",level:3},{value:"\uc11c\ubc84",id:"\uc11c\ubc84",level:3},{value:"\ud074\ub77c\uc774\uc5b8\ud2b8",id:"\ud074\ub77c\uc774\uc5b8\ud2b8",level:3}],c={toc:p},g="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"spring-messageconverter-\ub97c-\uc774\uc6a9\ud55c-\ud328\ud0b7-\uc554\ubcf5\ud638\ud654"},"Spring MessageConverter \ub97c \uc774\uc6a9\ud55c \ud328\ud0b7 \uc554/\ubcf5\ud638\ud654"),(0,a.yg)("h3",{id:"unity-\uac8c\uc784-\ud074\ub77c\uc774\uc5b8\ud2b8\uc640-\ud1b5\uc2e0\uc2dc-http-body-\ub97c-\uc554\ubcf5\ud638\ud654-\ud558\uae30-\uc704\ud55c-\uc804\ub7b5"},"Unity \uac8c\uc784 \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \ud1b5\uc2e0\uc2dc Http body \ub97c \uc554/\ubcf5\ud638\ud654 \ud558\uae30 \uc704\ud55c \uc804\ub7b5"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\ub300\uce6d\ud0a4\ub97c \uc0ac\uc6a9"),(0,a.yg)("li",{parentName:"ul"},"HTTP \uc694\uccad \ud5e4\ub354\uc758 Content-Type \uacfc Accept \ub97c \uc774\uc6a9\ud558\uc5ec \uc694\uccad\uacfc \uc751\ub2f5 \uba54\uc2dc\uc9c0\uc758 \uc885\ub958\ub97c \ud310\ub2e8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.yg)("li",{parentName:"ul"},"\uc694\uccad \ud5e4\ub354 Content-Type \uc774 application/vnd.company.alpha \uc778 \uacbd\uc6b0 AesHttpMessageConverter \uac00 \ub3d9\uc791, application/json \uc774\uba74 MappingJackson2HttpMessageConverter \uac00 \ub3d9\uc791\ud558\uc5ec Request Body \ub97c \ub514\ucf54\ub529 \ud6c4 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 Controller \ub85c \ub9e4\ud551\ud558\uc5ec \uc90d\ub2c8\ub2e4."),(0,a.yg)("li",{parentName:"ul"},"\uc694\uccad \ud5e4\ub354 Accept \uac00 application/vnd.company.alpha \uc778 \uacbd\uc6b0 AesHttpMessageConverter \uac00 \ub3d9\uc791, \uc544\ub2c8\uba74 \uae30\ubcf8 Converter \uac00 \ub3d9\uc791 (@RestController \uc774\uba74 MappingJackson2HttpMessageConverter \uac00 \ub3d9\uc791) \ud558\uc5ec Response Body \ub97c \uc778\ucf54\ub529 \ud6c4 \uc804\uc1a1\ud558\uac8c \ub429\ub2c8\ub2e4.")),(0,a.yg)("h3",{id:"\uc11c\ubc84"},"\uc11c\ubc84"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'// AES MediaType \uc815\uc758\nobject AesMediaType {\n\n    const val APPLICATION_AES_VALUE = "application/vnd.company.alpha"\n    const val APPLICATION_AES_VALUE_UTF8 = "application/vnd.company.alpha;charset=UTF-8"\n\n    val APPLICATION_AES = MediaType.valueOf(APPLICATION_LITEMETA_VALUE)\n    val APPLICATION_AES_UTF8 = MediaType.valueOf(APPLICATION_LITEMETA_VALUE_UTF8)\n\n}\n\n// AES \uc554/\ubcf5\ud638\ud654 MessageConverter\nclass AesHttpMessageConverter : AbstractHttpMessageConverter<Any>(Charsets.UTF_8, AesMediaType.APPLICATION_AES, AesMediaType.APPLICATION_AES_UTF8) {\n    private val log by loggerK\n\n    override fun supports(clazz: Class<*>): Boolean {\n        return true\n    }\n\n    // \uc694\uccad \ud328\ud0b7\uc758 Content-Type \ud5e4\ub354\uac00 AbstractHttpMessageConverter \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc124\uc815\ud55c MediaType\uc5d0 \ud574\ub2f9\ub418\uba74 readInternal \uc801\uc6a9\n    override fun canRead(mediaType: MediaType?): Boolean {\n        if (mediaType == null) {\n            return false\n        }\n        return supportedMediaTypes.contains(mediaType)\n    }\n\n    // \uc694\uccad \ud328\ud0b7\uc758 Accept \ud5e4\ub354\uac00 AbstractHttpMessageConverter \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc124\uc815\ud55c MediaType\uc5d0 \ud574\ub2f9\ub418\uba74 writeInternal \uc801\uc6a9\n    override fun canWrite(mediaType: MediaType?): Boolean {\n        if (mediaType == null) {\n            return false\n        }\n        return supportedMediaTypes.contains(mediaType)\n    }\n\n    // \uc751\ub2f5 \ud328\ud0b7 \uc554\ud638\ud654 \uc801\uc6a9\n    override fun writeInternal(t: Any, outputMessage: HttpOutputMessage) {\n        val json = Json.stringify(t)\n\n        if (log.isDebugEnabled) {\n            log.debug("write json: {}", json)\n        }\n\n        val encoded = AesCipher.encodeOrThrow(json)\n\n        if (log.isDebugEnabled) {\n            log.debug("write encoded: {}", encoded)\n        }\n\n        outputMessage.body.use {\n            it.write(encoded.toByteArray(Charsets.UTF_8))\n        }\n    }\n\n    // \uc694\uccad \ud328\ud0b7 \ubcf5\ud638\ud654\n    override fun readInternal(clazz: Class<out Any>, inputMessage: HttpInputMessage): Any {\n        val encoded = inputMessage.body.use { body -> String(body.readBytes(), Charsets.UTF_8) }\n\n        if (log.isDebugEnabled) {\n            log.debug("read encoded: {}", encoded)\n        }\n\n        val decoded = AesCipher.decodeOrThrow(encoded)\n\n        if (log.isDebugEnabled) {\n            log.debug("read json: {}", decoded)\n        }\n\n        return Json.parse(decoded, clazz)\n    }\n}\n\n\n// AES \uc554\ud638\ud654 \uad00\ub828\n\nclass AesDecodeException(message: String, cause: Throwable? = null) : RuntimeException(message, cause)\nclass AesEncodeException(message: String, cause: Throwable? = null) : RuntimeException(message, cause)\n\nobject AesCipher {\n    private var secretKey by Delegates.notNull<String>()\n    private var iv by Delegates.notNull<String>()\n    private const val ALGORITHM = "AES"\n    private const val TRANSFORMATION = "AES/CBC/PKCS5Padding"\n    private const val SECRET_KEY_PROPERTIES_NAME = "app.config.aes.secret-key"\n    private const val FALLBACK_SECRET_KEY = "4f22ad9345c139094fd3d4c0ca7d5acc"\n\n    init {\n        val env = ApplicationContextProvider.getBean<Environment>()\n        secretKey = env.getProperty(SECRET_KEY_PROPERTIES_NAME, FALLBACK_SECRET_KEY)\n        iv = secretKey.substring(0, 16)\n    }\n\n    fun encode(value: String): Result<String> {\n        return runCatching {\n            val textBytes = value.toByteArray(Charsets.UTF_8)\n            val ivSpec = IvParameterSpec(iv.toByteArray(Charsets.UTF_8))\n            val newKey = SecretKeySpec(secretKey.toByteArray(Charsets.UTF_8), ALGORITHM)\n            val cipher = Cipher.getInstance(TRANSFORMATION)\n            cipher.init(Cipher.ENCRYPT_MODE, newKey, ivSpec)\n            Base64.getEncoder().encodeToString(cipher.doFinal(textBytes))\n        }\n    }\n\n    fun encode(value: ByteArray): Result<String> = encode(String(value))\n\n    fun encodeOrThrow(value: String): String {\n        val result = encode(value)\n\n        result.onFailure { e ->\n            throw AesEncodeException(e.message.orEmpty(), e)\n        }\n\n        return result.getOrThrow()\n    }\n\n    fun decode(value: String): Result<String> {\n        return runCatching {\n            val textBytes = Base64.getDecoder().decode(value)\n            val ivSpec = IvParameterSpec(iv.toByteArray(Charsets.UTF_8))\n            val newKey = SecretKeySpec(secretKey.toByteArray(Charsets.UTF_8), ALGORITHM)\n            val cipher = Cipher.getInstance(TRANSFORMATION)\n            cipher.init(Cipher.DECRYPT_MODE, newKey, ivSpec)\n            String(cipher.doFinal(textBytes), Charsets.UTF_8)\n        }\n    }\n\n    fun decode(value: ByteArray): Result<String> = decode(String(value))\n\n    fun decodeOrThrow(value: String): String {\n        val result = decode(value)\n\n        result.onFailure { e ->\n            throw AesDecodeException(e.message.orEmpty(), e)\n        }\n\n        return result.getOrThrow()\n    }\n}\n\n\n// \uc124\uc815\uc5d0 AesHttpMessageConverter Bean \ucd94\uac00\n@Configuration(proxyBeanMethods = false)\nclass WebConfig : WebMvcConfigurer {\n    @Bean\n    fun httpMessageConverters(): HttpMessageConverters {\n        return HttpMessageConverters(AesHttpMessageConverter())\n    }\n}\n\n// Controller produces \ud56d\ubaa9\uc5d0 \uc801\uc6a9\ud560 MediaType \uc120\uc5b8\n@RequestMapping("/api/hello", produces = [MediaType.APPLICATION_JSON_VALUE, AesMediaType.APPLICATION_AES_VALUE])\n@RestController\nclass HelloApiController\n\n')),(0,a.yg)("h3",{id:"\ud074\ub77c\uc774\uc5b8\ud2b8"},"\ud074\ub77c\uc774\uc5b8\ud2b8"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'/// <summary>\n/// \ud328\ud0b7 \uc554\ud638\ud654\n///\n/// \ucd9c\ucc98: http://blog.zebsadiq.com/post/AESCBCPKCS5Padding-EncryptionDecryption-in-C.aspx\n///\n/// \uc0ac\uc6a9\ubc29\ubc95 \uc608\uc2dc\n///\n/// \uc554\ud638\ud654\n/// AesCipher.Encode("plainText", "\uc554\ud638\ud654\ud0a4", "\uc554\ud638\ud654\ud0a4".Substring(0,16))\n/// \uacb0\uacfc : JF+X5e3xY5QEFzmqyYJUQc4S6OCR/LVTAqILL5psshUSpyghFR4tVCgP/lkfUisANPqjKlyIQNFL32okeF6aOjcqwPJO3UDFKKC1uAv7EFU=\n///\n/// \ubcf5\ud638\ud654\n/// AesCipher.Decode("cipherText", "\uc554\ud638\ud654\ud0a4", "\uc554\ud638\ud654\ud0a4".Substring(0,16))\n/// \uacb0\uacfc : {"code":0,"message":"SUCCESS","data":{"message":"hello!"},"now":1656463353678}\n/// </summary>\npublic static class AesCipher\n{\n    public static string Encode(string value)\n    {\n        using (var rm = new RijndaelManaged())\n        {\n            rm.Key = HexStringToByte(UserDefine.secretKey);\n            rm.IV = HexStringToByte(UserDefine.iv);\n            rm.Mode = CipherMode.CBC;\n            rm.Padding = PaddingMode.PKCS7;\n\n            var encrypted = EncryptStringToBytes(value, rm.Key, rm.IV);\n\n            return Convert.ToBase64String(encrypted);\n        }\n    }\n\n    public static string Decode(string value)\n    {\n        using (var rm = new RijndaelManaged())\n        {\n            rm.Key = HexStringToByte(UserDefine.secretKey);\n            rm.IV = HexStringToByte(UserDefine.iv);\n            rm.Mode = CipherMode.CBC;\n            rm.Padding = PaddingMode.PKCS7;\n\n            var ourEnc = Convert.FromBase64String(value);\n\n            return DecryptStringFromBytes(ourEnc, rm.Key, rm.IV);\n        }\n    }\n\n    private static bool IsJsonObject(string value)\n    {\n        return value.StartsWith(\'{\');\n    }\n\n    private static bool IsJsonArray(string value)\n    {\n        return value.StartsWith(\'[\');\n    }\n\n    private static bool IsJson(string value)\n    {\n        return IsJsonObject(value) || IsJsonArray(value);\n    }\n\n    public static string DecodeIfEncrypted(string value)\n    {\n        if (IsJson(value))\n        {\n            return value;\n        }\n\n        return Decode(value);\n    }\n\n    static byte[] EncryptStringToBytes(string plainText, byte[] key, byte[] iv)\n    {\n        if (plainText == null || plainText.Length <= 0)\n            throw new ArgumentNullException(nameof(plainText));\n        if (key == null || key.Length <= 0)\n            throw new ArgumentNullException(nameof(key));\n        if (iv == null || iv.Length <= 0)\n            throw new ArgumentNullException(nameof(key));\n\n        byte[] encrypted;\n\n        using (var rijAlg = new RijndaelManaged())\n        {\n            rijAlg.Key = key;\n            rijAlg.IV = iv;\n\n            // Create a decrytor to perform the stream transform.\n            ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n            // Create the streams used for encryption.\n            using (var msEncrypt = new MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n\n                    encrypted = msEncrypt.ToArray();\n                }\n            }\n        }\n\n        return encrypted;\n    }\n\n    static string DecryptStringFromBytes(byte[] cipherText, byte[] key, byte[] iv)\n    {\n        if (cipherText == null || cipherText.Length <= 0)\n            throw new ArgumentNullException(nameof(cipherText));\n        if (key == null || key.Length <= 0)\n            throw new ArgumentNullException(nameof(key));\n        if (iv == null || iv.Length <= 0)\n            throw new ArgumentNullException(nameof(iv));\n\n        string plainText;\n\n        using (var rm = new RijndaelManaged())\n        {\n            rm.Key = key;\n            rm.IV = iv;\n\n            ICryptoTransform decryptor = rm.CreateDecryptor(rm.Key, rm.IV);\n\n            using (var msDecrypt = new MemoryStream(cipherText))\n            {\n                using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (var srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        plainText = srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n\n        return plainText;\n    }\n\n    static byte[] HexStringToByte(string hexString)\n    {\n        return Encoding.UTF8.GetBytes(hexString);\n    }\n}\n\n\n')))}u.isMDXComponent=!0}}]);